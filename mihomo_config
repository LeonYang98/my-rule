port: 7890
socks-port: 7894
mixed-port: 7895
redir-port: 7896
tproxy-port: 7897

unified-delay: true
geodata-mode: false
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome

allow-lan: true
mode: rule
log-level: info
ipv6: true
udp: true

external-controller: 127.0.0.1:9097
# external-ui: ui
# external-ui-url: 'https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'
# secret: 3674889

geox-url:
  # geoip: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geoip.dat'
  # geosite: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geosite.dat'
  mmdb: 'https://gitlab.com/Masaiki/GeoIP2-CN/-/raw/release/Country.mmdb'
  asn: 'https://gitlab.com/Loon0x00/loon_data/-/raw/main/geo/GeoLite2-ASN.mmdb'

profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com

  skip-domain:
    - Mijia Cloud

tun:
  enable: true
  stack: mixed
  dns-hijack:
    - any:53
  auto-route: true
  auto-detect-interface: true

dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - +.lan
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
    - 160426.alidns.com
  nameserver:
    - https://223.5.5.5/dns-query#h3=true
    - https://223.6.6.6/dns-query#h3=true
    - https://160426.alidns.com/dns-query#h3=true

# 锚点 - 节点订阅的参数 [每小时更新一次订阅节点，每 6 秒一次健康检查]
NodeParam: &NodeParam {type: http, interval: 3600, health-check: {enable: true, url: 'https://www.gstatic.com/generate_204', interval: 6}}

# 锚点 - 节点订阅
proxy-providers: 
  机场名称1:
    url: '机场1的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场名称1.yaml'
    override:
      additional-prefix: "[机场名称1] " # 为订阅节点添加机场名称前缀
  机场名称2:
    url: '机场2的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场名称2.yaml'
    override:
      additional-prefix: "[机场名称2] " # 为订阅节点添加机场名称前缀

# 锚点 - 节点筛选组
FilterHK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong|HKBGP)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterSG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore|SGBGP)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterTW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan|TWBGP)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterJP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan|JPBGP)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUS: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterDE: &FilterDE '^(?=.*((?i)🇩🇪|德国|(\b(DE|Germany)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterGame: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)\b)))(?!.*((?i)回国|校园)).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b|(\d{4}-\d{2}-\d{2}|\d+G)))).*$'

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 6 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest: &UrlTest {type: url-test, interval: 6, tolerance: 20, lazy: true, url: 'https://www.gstatic.com/generate_204', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 负载均衡参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance: &LoadBalance {type: load-balance, interval: 6, lazy: true, url: 'https://www.gstatic.com/generate_204', disable-udp: false, strategy: consistent-hashing, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 规则参数 [每小时更新一次订阅规则，更新规则时使用直连策略]
RuleProviders: &RuleProviders {type: http, behavior: classical, interval: 3600, format: yaml, proxy: DIRECT}

# 策略组
proxy-groups: 
  - {name: 游戏选择, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Game.png, type: select, include-all-providers: true, filter: *FilterGame, proxies: [DIRECT, 全球选择]}
  - {name: 全球选择, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Domestic.png, type: select, include-all-providers: true, filter: *FilterAll}
  - {name: Emby, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Emby.png, type: select, proxies: [全球选择, DIRECT, 香港策略, 台湾策略, 日本策略, 新国策略]}
  - {name: Telegram, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Telegram.png, type: select, proxies: [新国策略, 香港策略]}
  - {name: AI, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/AI.png, type: select, proxies: [日本策略, 新国策略, 香港策略, 美国策略, 台湾策略]}
  - {name: BiliBili, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/bilibili_1.png, type: select, proxies: [DIRECT, 香港策略, 台湾策略]}
  - {name: 兜底策略, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Final.png, type: select, proxies: [香港策略, 台湾策略, 日本策略, 新国策略, 美国策略, 德国策略, DIRECT]}

  - {name: 香港策略, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Hong_Kong.png, type: select, proxies: [⏱香港时延优选策略组, 🎛香港负载均衡策略组]}
  - {name: 新国策略, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Singapore.png, type: select, proxies: [⏱新国时延优选策略组, 🎛新国负载均衡策略组]}
  - {name: 台湾策略, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/China.png, type: select, proxies: [⏱台湾时延优选策略组, 🎛台湾负载均衡策略组]}
  - {name: 日本策略, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Japan.png, type: select, proxies: [⏱日本时延优选策略组, 🎛日本负载均衡策略组]}
  - {name: 美国策略, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_States.png, type: select, proxies: [⏱美国时延优选策略组, 🎛美国负载均衡策略组]}
  - {name: 德国策略, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Germany.png, type: select, proxies: [⏱德国时延优选策略组, 🎛德国负载均衡策略组]}

# 时延优选策略组
  - {name: ⏱香港时延优选策略组, <<: *UrlTest, filter: *FilterHK}
  - {name: ⏱新国时延优选策略组, <<: *UrlTest, filter: *FilterSG}
  - {name: ⏱台湾时延优选策略组, <<: *UrlTest, filter: *FilterTW}
  - {name: ⏱日本时延优选策略组, <<: *UrlTest, filter: *FilterJP}
  - {name: ⏱美国时延优选策略组, <<: *UrlTest, filter: *FilterUS}
  - {name: ⏱德国时延优选策略组, <<: *UrlTest, filter: *FilterDE}

# 负载均衡策略组
  - {name: 🎛香港负载均衡策略组, <<: *LoadBalance, filter: *FilterHK}
  - {name: 🎛新国负载均衡策略组, <<: *LoadBalance, filter: *FilterSG}
  - {name: 🎛台湾负载均衡策略组, <<: *LoadBalance, filter: *FilterTW}
  - {name: 🎛日本负载均衡策略组, <<: *LoadBalance, filter: *FilterJP}
  - {name: 🎛美国负载均衡策略组, <<: *LoadBalance, filter: *FilterUS}
  - {name: 🎛德国负载均衡策略组, <<: *LoadBalance, filter: *FilterDE}

# 订阅规则
rule-providers:
  Lan:
    <<: *RuleProviders
    path: './rules/Lan.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml'

  Direct:
    <<: *RuleProviders
    path: './rules/Direct.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Direct/Direct.yaml'

  Proxy:
    <<: *RuleProviders
    path: './rules/Proxy.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Proxy/Proxy_Classical.yaml'

  ChinaDownloadCDN:
    <<: *RuleProviders
    path: './rules/ChinaDownloadCDN.yaml'
    url: 'https://raw.githubusercontent.com/LeonYang98/my-rule/refs/heads/main/clash/ChinaDownloadCDN'

  InternationalDownloadCDN:
    <<: *RuleProviders
    path: './rules/InternationalDownloadCDN.yaml'
    url: 'https://raw.githubusercontent.com/LeonYang98/my-rule/refs/heads/main/clash/InternationalDownloadCDN'

  AI:
    <<: *RuleProviders
    path: './rules/AI.yaml'
    url: 'https://raw.githubusercontent.com/LeonYang98/my-rule/refs/heads/main/clash/AI'
  
  Game:
    <<: *RuleProviders
    path: './rules/Game.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/Game.yaml'

  Steam:
    <<: *RuleProviders
    path: './rules/Steam.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Steam/Steam.yaml'

  Netflix:
    <<: *RuleProviders
    path: './rules/Netflix.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix.yaml'

  BiliBili:
    <<: *RuleProviders
    path: './rules/BiliBili.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBili/BiliBili.yaml'

  Emby:
    <<: *RuleProviders
    path: './rules/Emby.yaml'
    url: 'https://raw.githubusercontent.com/LeonYang98/my-rule/main/clash/EmbyServer.yaml'

  Google:
    <<: *RuleProviders
    path: './rules/Google.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml'

  Telegram:
    <<: *RuleProviders
    path: './rules/Telegram.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml'

  Microsoft:
    <<: *RuleProviders
    path: './rules/Microsoft.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.yaml'

  YouTube:
    <<: *RuleProviders
    path: './rules/YouTube.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml'

  GoogleFCM:
    <<: *RuleProviders
    path: './rules/GoogleFCM.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GoogleFCM/GoogleFCM.yaml' 

# 规则指向
rules:
  - IP-CIDR, 95.161.76.100/31, REJECT
  - RULE-SET, Lan, DIRECT
  - RULE-SET, Direct, DIRECT
  - RULE-SET, GoogleFCM, DIRECT
  - RULE-SET, Proxy, 兜底策略
  - RULE-SET, ChinaDownloadCDN, DIRECT
  - RULE-SET, InternationalDownloadCDN, DIRECT
  - RULE-SET, AI, AI
  - RULE-SET, Steam, 兜底策略
  - RULE-SET, Game, 游戏选择
  - RULE-SET, Netflix, 兜底策略
  - RULE-SET, BiliBili, BiliBili
  - RULE-SET, Emby, Emby
  - RULE-SET, YouTube, 新国策略
  - RULE-SET, Google, 兜底策略
  - RULE-SET, Telegram, Telegram
  - GEOIP, CN, DIRECT
  - MATCH, 兜底策略
